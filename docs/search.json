[{"path":"https://jabenninghoff.github.io/cards/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 cards authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jabenninghoff.github.io/cards/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO","title":"TODO","text":"Add vignette demonstrating video poker pay tables Add faster hand evaluator using Poker-Hand-Evaluator reticulate Add faster hand evaluator using Poker-Hand-Evaluator Rcpp Migrate Poker-Hand-Evaluator C++ code new R “phevaluator” package using Rcpp Modules","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"data-frame","dir":"Articles","previous_headings":"","what":"Data Frame","title":"Benchmarks","text":"Benchmark initial implementation using data.frame compared integer() approach similar PH Evaluator card.py.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"new-deck","dir":"Articles","previous_headings":"Data Frame","what":"New Deck","title":"Benchmarks","text":"Create new deck using new_deck_df() integer vector. new_deck_df() designed called frequently, using integer vector much faster.","code":"deck <- new_deck_df() deck_int <- 0:51 bench::mark(new_deck_df()) #> # A tibble: 1 × 6 #>   expression         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck_df()   19.9µs     22µs    42922.    1.25KB     17.2 bench::mark(0:51) #> # A tibble: 1 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 0:51              0     41ns 32820178.        0B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"deal","dir":"Articles","previous_headings":"Data Frame","what":"Deal","title":"Benchmarks","text":"Compare performance deal_hand_df() sampling integers: deal_hand_df() 7 times slower sample().","code":"bench::mark(deal_hand_df(deck)) #> # A tibble: 1 × 6 #>   expression              min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>         <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand_df(deck)   18.2µs   19.9µs    48812.    6.22KB     9.76 bench::mark(sample(deck_int, 5)) #> # A tibble: 1 × 6 #>   expression               min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>          <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 sample(deck_int, 5)   2.42µs   2.71µs   342513.    2.75KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"print","dir":"Articles","previous_headings":"Data Frame","what":"Print","title":"Benchmarks","text":"Test performance print_hand_df() simple function prints cards based integers. print_hand_df() 14-15 times slower integer approach.","code":"test_hand <- deal_hand_df(deck) bench::mark(print_hand_df(test_hand)) #> # A tibble: 1 × 6 #>   expression                    min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>               <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_df(test_hand)   76.7µs   80.2µs    12210.    10.5KB     16.5  print_hand_int <- function(h) {   cards <- paste0(rep(c(2:9, \"T\", \"J\", \"Q\", \"K\", \"A\"), each = 4), c(\"C\", \"D\", \"H\", \"S\"))   paste0(cards[h + 1], collapse = \" \") } test_hand_int <- sample(0:51, 5) bench::mark(print_hand_int(test_hand_int)) #> # A tibble: 1 × 6 #>   expression                         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_int(test_hand_int)   5.74µs   5.99µs   157672.      928B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate","dir":"Articles","previous_headings":"Data Frame","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand_df() single hand randomly selected hands: expected naive poker hand evaluator, performance eval_hand_df() poor compared fast algorithms.","code":"bench::mark(eval_hand_df(test_hand)) #> # A tibble: 1 × 6 #>   expression                   min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>              <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(test_hand)   55.6µs   58.1µs    16790.      37KB     14.3 bench::mark(eval_hand_df(deal_hand_df(deck))) #> # A tibble: 1 × 6 #>   expression                            min  median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                       <bch:tm> <bch:t>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(deal_hand_df(deck))   60.7µs  75.6µs    13201.    2.75KB     14.6"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"summary","dir":"Articles","previous_headings":"Data Frame","what":"Summary","title":"Benchmarks","text":"implementation using integer likely much faster first implementation using data.frame. Rank suit can derived using integer division modulo arithmetic respectively,tabulate() faster replacement rle(). Note tabulate approach 7 times faster sorting run length encoding.","code":"0:51 %/% 4 #>  [1]  0  0  0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6 #> [26]  6  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 #> [51] 12 12 tabulate(0:51 %/% 4 + 1, 13) #>  [1] 4 4 4 4 4 4 4 4 4 4 4 4 4 0:51 %% 4 #>  [1] 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 #> [39] 2 3 0 1 2 3 0 1 2 3 0 1 2 3 tabulate(0:51 %% 4 + 1, 4) #> [1] 13 13 13 13  bench::mark(rle(sort(sample(0:51, 5) %/% 4 + 1))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                         <bch:t> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 rle(sort(sample(0:51, 5)%/%4 + 1))  20.5µs 22.2µs    43539.    2.75KB     13.1 bench::mark(tabulate(sample(0:51, 5) %/% 4 + 1, 13)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 tabulate(sample(0:51, 5)%/%4 + 1, … 3.24µs 3.57µs   263442.    2.75KB     26.3"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"integer","dir":"Articles","previous_headings":"","what":"Integer","title":"Benchmarks","text":"Benchmark second implementation using integer().","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"new-deck-1","dir":"Articles","previous_headings":"Integer","what":"New Deck","title":"Benchmarks","text":"Create new deck using new_deck() new_deck_df(). new_deck() 90 times faster.","code":"deck_df <- new_deck_df() deck <- new_deck() bench::mark(new_deck_df()) #> # A tibble: 1 × 6 #>   expression         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck_df()   19.8µs   21.3µs    45789.    1.25KB     13.7 bench::mark(new_deck()) #> # A tibble: 1 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck()      1ns     41ns 16473364.        0B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"deal-1","dir":"Articles","previous_headings":"Integer","what":"Deal","title":"Benchmarks","text":"Compare performance deal_hand_df() deal_hand() deal_hand() 6 times faster.","code":"bench::mark(deal_hand_df(deck_df)) #> # A tibble: 1 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand_df(deck_df)   18.2µs   19.5µs    50254.    2.75KB     15.1 bench::mark(deal_hand(deck)) #> # A tibble: 1 × 6 #>   expression           min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand(deck)   2.58µs   2.91µs   324200.    5.51KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"print-1","dir":"Articles","previous_headings":"Integer","what":"Print","title":"Benchmarks","text":"Test performance print_hand_df() print_hand(). print_hand() 16 times faster.","code":"test_hand_df <- deal_hand_df(deck_df) test_hand <- deal_hand(deck)  bench::mark(print_hand_df(test_hand_df)) #> # A tibble: 1 × 6 #>   expression                       min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_df(test_hand_df)     77µs   82.1µs    12032.        0B     16.4 bench::mark(print_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand(test_hand)   5.78µs   6.15µs   157772.    8.45KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate-1","dir":"Articles","previous_headings":"Integer","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand_df() eval_hand() single hand. eval_hand() 20 times faster, perform poorly compared fast algorithms.","code":"bench::mark(eval_hand_df(test_hand_df)) #> # A tibble: 1 × 6 #>   expression                      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                 <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(test_hand_df)   55.7µs   58.9µs    16723.        0B     14.4 bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   2.05µs    2.3µs   426004.    27.5KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"multiple-hands","dir":"Articles","previous_headings":"Integer","what":"Multiple Hands","title":"Benchmarks","text":"Compare performance evaluating printing multiple hands. Overall, new implementation 13-14 times faster.","code":"bench::mark({   deck <- new_deck_df()   replicate(50, {     hand <- deal_hand_df(deck)     paste0(print_hand_df(hand), \": \", eval_hand_df(hand))   }) }) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 { deck <- new_deck_df() replicate(… 7.95ms 8.13ms      122.     159KB     16.2 bench::mark({   deck <- new_deck()   replicate(50, {     hand <- deal_hand(deck)     paste0(print_hand(hand), \": \", eval_hand(hand))   }) }) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 { deck <- new_deck() replicate(50, … 639µs  700µs     1425.     199KB     10.5"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"python","dir":"Articles","previous_headings":"","what":"Python","title":"Benchmarks","text":"Benchmark integer() approach PH Evaluator using reticulate.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"import","dir":"Articles","previous_headings":"Python","what":"Import","title":"Benchmarks","text":"Test performance phevaluator using reticulate::import(), starting sample_cards(): phevaluator$sample_cards() 13 times slower R integer implementation. Also test phevaluator$evaluate_card() R integer method. evaluate_card() expects five seven integers passed individual parameters. Surprisingly, phevaluator almost slow original data frame implementation. Test using specific hands avoid overhead .call() .list(): Calling evaluate_cards() directly doesn’t significantly change results. Test random hands: Conclusion: using phevaluator via reticulate::import() faster way evaluate hands. important note phevaluator$evaluate_cards() eval_hand(), phevaluator ranks poker hands eval_hand() determines hand rank category.","code":"bench::mark(deal_hand(deck)) #> # A tibble: 1 × 6 #>   expression           min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand(deck)   2.54µs   2.91µs   324520.    2.75KB     32.5 bench::mark(phevaluator$sample_cards(5L)) #> # A tibble: 1 × 6 #>   expression                        min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                   <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$sample_cards(5L)   48.4µs     52µs    17001.    25.4KB     10.8 bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   2.09µs    2.3µs   422559.        0B        0 bench::mark(do.call(phevaluator$evaluate_cards, as.list(test_hand))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 do.call(phevaluator$evaluate_cards… 53.3µs 56.7µs    17287.    17.4KB     10.5 four_aces <- c(51L, 50L, 49L, 48L, 47L) royal_flush <- c(50L, 46L, 42L, 38L, 34L)  bench::mark(eval_hand(four_aces)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(four_aces)    984ns   1.15µs   853753.        0B        0 bench::mark(phevaluator$evaluate_cards(51L, 50L, 49L, 48L, 47L)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$evaluate_cards(51L, 50L…  51µs 54.4µs    18114.    17.4KB     12.7  bench::mark(eval_hand(royal_flush)) #> # A tibble: 1 × 6 #>   expression                  min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>             <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(royal_flush)    1.8µs   1.97µs   497364.        0B        0 bench::mark(phevaluator$evaluate_cards(50L, 46L, 42L, 38L, 34L)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$evaluate_cards(50L, 46… 50.9µs 54.3µs    18183.    17.4KB     12.7 bench::mark(eval_hand(deal_hand(deck))) #> # A tibble: 1 × 6 #>   expression                      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                 <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(deal_hand(deck))    4.1µs   5.45µs   162003.    2.75KB     16.2 bench::mark(do.call(phevaluator$evaluate_cards, as.list(deal_hand(deck)))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 do.call(phevaluator$evaluate_cards… 57.4µs 61.9µs    14877.    20.2KB     10.5"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"cc","dir":"Articles","previous_headings":"","what":"C/C++","title":"Benchmarks","text":"Benchmark integer() approach C/C++ implementation PH Evaluator using Rcpp. current version implements eval_hand_phe(), uses EvaluateCards() describeCategory() return card rank category.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate-2","dir":"Articles","previous_headings":"C/C++","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand() eval_hand_phe() single hand: Somewhat surprisingly, eval_hand_phe() 2 times faster eval_hand(), however, eval_hand_phe() doesn’t just evaluate hand rank category, also determines exact hand rank. Reviewing benchmarks PH Evaluator README system, compiled C/C++ implementation capable 70 million hands per second, eval_hand_phe() achieves 1 million per second. likely due additional overhead using R, , importantly, additional call describeCategory(), benchmark code calls EvaluateCards(). future implementation implement full pheval libraries C++ code card_sampler.h generate random hands standalone R package using Rcpp Modules.","code":"bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   2.09µs   2.42µs   403932.        0B        0 bench::mark(eval_hand_phe(test_hand)) #> # A tibble: 1 × 6 #>   expression                    min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>               <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_phe(test_hand)    902ns   1.02µs   881831.    4.73KB     88.2"},{"path":"https://jabenninghoff.github.io/cards/articles/video-poker.html","id":"one-hand","dir":"Articles","previous_headings":"","what":"One Hand","title":"Video Poker","text":"Run simple simulations single hand, without drawing new cards. Calculate payouts, using table optimal strategy article pay tables: Payout per coin betting 5 coins. Filter Royal Flushes: Calculate total payout, percentage return: simple “one hand” simulation performs much poorer expected return 99.54% optimal strategy.","code":"hands <- replicate(runs, eval_hand(deal_hand(deck))) payout <- hands |>   as_tibble_col(column_name = \"hand\") |>   mutate(payout = case_match(     hand,     c(\"high_card\", \"one_pair\") ~ 0,     \"jacks_better\" ~ 1,     \"two_pair\" ~ 2,     \"three_ofakind\" ~ 3,     \"straight\" ~ 4,     \"flush\" ~ 6,     \"full_house\" ~ 9,     \"four_ofakind\" ~ 25,     \"straight_flush\" ~ 50,     \"royal_flush\" ~ 800   )) payout |>   filter(payout == 800) #> # A tibble: 4 × 2 #>   hand        payout #>   <chr>        <dbl> #> 1 royal_flush    800 #> 2 royal_flush    800 #> 3 royal_flush    800 #> 4 royal_flush    800 total <- payout |>   pull(payout) |>   sum()  total #> [1] 677083 total / runs #> [1] 0.3385415"},{"path":"https://jabenninghoff.github.io/cards/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Benninghoff. Author, maintainer.","code":""},{"path":"https://jabenninghoff.github.io/cards/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benninghoff J (2024). cards: Card Simulation Tools. R package version 0.3.4,  https://github.com/jabenninghoff/cards, https://jabenninghoff.github.io/cards/.","code":"@Manual{,   title = {cards: Card Simulation Tools},   author = {John Benninghoff},   year = {2024},   note = {R package version 0.3.4,  https://github.com/jabenninghoff/cards},   url = {https://jabenninghoff.github.io/cards/}, }"},{"path":[]},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Card Simulation Tools","text":"Card Simulation Tools: Tools card game simulations, written base R. Feel free use /fork project!","code":""},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Card Simulation Tools","text":"can install development version cards GitHub : using renv:","code":"# install.packages(\"remotes\") remotes::install_github(\"jabenninghoff/cards\") # install.packages(\"renv\") renv::install(\"jabenninghoff/cards\")"},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Card Simulation Tools","text":"Changelog: See “Changelog” NEWS.md. Planned: TODO","code":""},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Card Simulation Tools","text":"cards package supports random draws evaluation poker rank category:","code":"library(cards)  deck <- new_deck() replicate(50, {   hand <- deal_hand(deck)   paste0(print_hand(hand), \": \", eval_hand(hand)) }) #>  [1] \"JH QS 7D 3C QD: jacks_better\"  \"6D TC 9D 3C 4D: high_card\"     #>  [3] \"8H KH 7C AD 3D: high_card\"     \"6C 7S 7C TD 3D: one_pair\"      #>  [5] \"KS 8S JS JD 3D: jacks_better\"  \"JD TC 5D 3C JS: jacks_better\"  #>  [7] \"9S TC AH 3H 7C: high_card\"     \"4C 5H AS 9S KD: high_card\"     #>  [9] \"AC 9C KH 5S AD: jacks_better\"  \"6H 2C 5H 7S JH: high_card\"     #> [11] \"7H AS 3H JD TS: high_card\"     \"8D 4H 3D AS 9D: high_card\"     #> [13] \"2C KC 2H 3H QC: one_pair\"      \"3S 6S 6D 5C 9D: one_pair\"      #> [15] \"6S JH 7C TS 4D: high_card\"     \"4H 6C TH AC 3H: high_card\"     #> [17] \"KH 9D 7S 8S 5D: high_card\"     \"3D KS TS JC 6S: high_card\"     #> [19] \"KC 2S 9C AS 9H: one_pair\"      \"6D 8D KH TH 8C: one_pair\"      #> [21] \"KC AH 9D 3D 5C: high_card\"     \"8C 3H 8H 7C KH: one_pair\"      #> [23] \"9S QD 9C 7H 2C: one_pair\"      \"2D 8S 9S 3C AH: high_card\"     #> [25] \"JC 2D TS 3C QS: high_card\"     \"JC 5D JD 8H 5C: two_pair\"      #> [27] \"6C TC AH 8H 3D: high_card\"     \"KS 8D 5C 9S 2S: high_card\"     #> [29] \"QD TC 6D 9S 4S: high_card\"     \"KD KH 8C 8D 5S: two_pair\"      #> [31] \"9C 5H 5D 5C TC: three_ofakind\" \"KS 5C 6D QD 4C: high_card\"     #> [33] \"QH 9S 4C AC 7D: high_card\"     \"3D 8H TD 9H 4H: high_card\"     #> [35] \"8H 8S 6D 4C 9S: one_pair\"      \"2D JH 6D 7H 8S: high_card\"     #> [37] \"5C TS 2D 3H 6C: high_card\"     \"TS 3S JC 8C QD: high_card\"     #> [39] \"8H 2D 8S 6C 8D: three_ofakind\" \"8C 4S AH 2H 9S: high_card\"     #> [41] \"6H 2C 6S 4S KS: one_pair\"      \"2D AD 5S 8H 5D: one_pair\"      #> [43] \"2H 7C JD QC JC: jacks_better\"  \"5S 5C 9H 7H 6H: one_pair\"      #> [45] \"AD 4S 5D 4H 4C: three_ofakind\" \"5H 8D 3C KS QD: high_card\"     #> [47] \"7H 7D 2H QC 2C: two_pair\"      \"JC KC AD 2D QC: high_card\"     #> [49] \"8D JD AS 7C 5D: high_card\"     \"4S QS 5D KS 8C: high_card\""},{"path":"https://jabenninghoff.github.io/cards/reference/cards-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cards: Card Simulation Tools — cards-package","title":"cards: Card Simulation Tools — cards-package","text":"Tools card game simulations, written base R.","code":""},{"path":[]},{"path":"https://jabenninghoff.github.io/cards/reference/cards-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cards: Card Simulation Tools — cards-package","text":"Maintainer: John Benninghoff jbenninghoff@mac.com (ORCID)","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a hand of cards — deal_hand","title":"Deal a hand of cards — deal_hand","text":"Return five card hand deck cards, integer","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a hand of cards — deal_hand","text":"","code":"deal_hand(deck, size = 5)"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a hand of cards — deal_hand","text":"deck deck created new_deck(). size hand size, default = 5.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a hand of cards — deal_hand","text":"Uses sample() select random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a hand of cards — deal_hand","text":"","code":"deal_hand(new_deck()) #> [1] 44 22 11 36 37"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a hand of cards using data.frame — deal_hand_df","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"Return five card hand deck cards, data.frame rank suit.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"","code":"deal_hand_df(d)"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"d deck created new_deck_df().","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"data.frame containing 5 random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"Uses sample() select 5 random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"","code":"deck <- new_deck_df() deal_hand_df(deck) #>    rank suit #> 47    9    S #> 52    A    S #> 31    6    H #> 4     5    C #> 38    K    H"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand — eval_hand","title":"Evaluate a poker hand — eval_hand","text":"Evaluate rank category five card poker hand.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand — eval_hand","text":"","code":"eval_hand(hand)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand — eval_hand","text":"hand hand cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand — eval_hand","text":"string hand rank","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand — eval_hand","text":"","code":"hand <- deal_hand(new_deck()) print_hand(hand) #> [1] \"4C 3C AH 7S 5H\" eval_hand(hand) #> [1] \"high_card\""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand using data.frame — eval_hand_df","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"Evaluate rank category five card poker hand.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"","code":"eval_hand_df(h)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"h data.frame 5 cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"string hand rank","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"Uses order() rle() identify flushes, straights, pairs, three, four kind.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"","code":"deck <- new_deck_df() (hand <- deal_hand_df(deck)) #>    rank suit #> 13    A    C #> 2     3    C #> 43    5    S #> 50    Q    S #> 5     6    C eval_hand_df(hand) #> [1] \"high_card\""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_phe.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","title":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","text":"Evaluate rank category five card poker hand using PH Evaluator.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_phe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","text":"","code":"eval_hand_phe(hand)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_phe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","text":"hand hand cards (integer vector length 5).","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_phe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","text":"string hand rank.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_phe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","text":"Implemented following Rcpp-libraries, PH Evaluator cpp_example.cc, RcppAnnoy, help R-Bloggers Rcpp Roxygen2, usethis::use_rcpp(), roxygen2 instructions Rcpp, Rcpp everyone, rxylib Makefile Stack Overflow. eval_hand_phe returns one rank categories \"Straight Flush\", \"Four Kind\", \"Full House\", \"Flush\", \"Straight\", \"Three Kind\", \"Two Pair\", \"One Pair\", \"High Card\". \"Royal Flush\" \"Jacks Better\" currently supported.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_phe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand using PH Evaluator — eval_hand_phe","text":"","code":"hand <- deal_hand(new_deck()) print_hand(hand) #> [1] \"7C QS TD 3D 2S\" eval_hand_phe(hand) #> [1] \"High Card\""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deck of cards — new_deck","title":"Create a deck of cards — new_deck","text":"Return deck 52 playing cards represented integers 0 51.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deck of cards — new_deck","text":"","code":"new_deck()"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deck of cards — new_deck","text":"Following example PH Evaluator, integers used represent card id, two least significant bits representing 4 suits (0-3), rest representing 13 ranks (0-12): card, rank id %/% 4, suit id %% 4.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deck of cards — new_deck","text":"","code":"new_deck() #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #> [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #> [51] 50 51 new_deck() %/% 4 #>  [1]  0  0  0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6 #> [26]  6  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 #> [51] 12 12 new_deck() %% 4 #>  [1] 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 #> [39] 2 3 0 1 2 3 0 1 2 3 0 1 2 3"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deck of cards using data.frame — new_deck_df","title":"Create a deck of cards using data.frame — new_deck_df","text":"Return standard deck 52 playing cards, data.frame rank suit.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deck of cards using data.frame — new_deck_df","text":"","code":"new_deck_df()"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deck of cards using data.frame — new_deck_df","text":"data.frame containing deck 52 cards","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deck of cards using data.frame — new_deck_df","text":"Uses expand.grid() creates data.frame factors combining ranks suits.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deck of cards using data.frame — new_deck_df","text":"","code":"new_deck_df() #>    rank suit #> 1     2    C #> 2     3    C #> 3     4    C #> 4     5    C #> 5     6    C #> 6     7    C #> 7     8    C #> 8     9    C #> 9     T    C #> 10    J    C #> 11    Q    C #> 12    K    C #> 13    A    C #> 14    2    D #> 15    3    D #> 16    4    D #> 17    5    D #> 18    6    D #> 19    7    D #> 20    8    D #> 21    9    D #> 22    T    D #> 23    J    D #> 24    Q    D #> 25    K    D #> 26    A    D #> 27    2    H #> 28    3    H #> 29    4    H #> 30    5    H #> 31    6    H #> 32    7    H #> 33    8    H #> 34    9    H #> 35    T    H #> 36    J    H #> 37    Q    H #> 38    K    H #> 39    A    H #> 40    2    S #> 41    3    S #> 42    4    S #> 43    5    S #> 44    6    S #> 45    7    S #> 46    8    S #> 47    9    S #> 48    T    S #> 49    J    S #> 50    Q    S #> 51    K    S #> 52    A    S"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hand of cards — print_hand","title":"Print a hand of cards — print_hand","text":"Returns character vector cards, collapsed default.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hand of cards — print_hand","text":"","code":"print_hand(hand, collapse = TRUE)"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hand of cards — print_hand","text":"hand hand cards. collapse TRUE, collapse character vector.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a hand of cards — print_hand","text":"","code":"(hand <- deal_hand(new_deck())) #> [1] 47 33 34 24 21 print_hand(hand) #> [1] \"KS TD TH 8C 7D\""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hand of cards using data.frame — print_hand_df","title":"Print a hand of cards using data.frame — print_hand_df","text":"Returns character vector sorted cards, collapsed default.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hand of cards using data.frame — print_hand_df","text":"","code":"print_hand_df(h, collapse = TRUE)"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hand of cards using data.frame — print_hand_df","text":"h data.frame 5 cards. collapse TRUE, collapse character vector.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a hand of cards using data.frame — print_hand_df","text":"character vector sorted cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a hand of cards using data.frame — print_hand_df","text":"","code":"deck <- new_deck_df() (hand <- deal_hand_df(deck)) #>    rank suit #> 43    5    S #> 7     8    C #> 32    7    H #> 6     7    C #> 9     T    C print_hand_df(hand) #> [1] \"5S 7H 7C 8C TC\""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-034","dir":"Changelog","previous_headings":"","what":"cards 0.3.4","title":"cards 0.3.4","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-033","dir":"Changelog","previous_headings":"","what":"cards 0.3.3","title":"cards 0.3.3","text":"Add new cards hex sticker logo stickers man/figures/logo.png per roxygen2 README.Rmd per pkgdown","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-032","dir":"Changelog","previous_headings":"","what":"cards 0.3.2","title":"cards 0.3.2","text":"Update TODO","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-031","dir":"Changelog","previous_headings":"","what":"cards 0.3.1","title":"cards 0.3.1","text":"Added copy-phevaluator script copy (update) PH Evaluator source header files","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-030","dir":"Changelog","previous_headings":"","what":"cards 0.3.0","title":"cards 0.3.0","text":"Added eval_hand_phe(): Evaluate rank category five card poker hand using PH Evaluator’s five card C/C++ implementation using Rcpp. Added benchmarks PH Evaluator C/C++ implementation using eval_hand_phe()","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-027","dir":"Changelog","previous_headings":"","what":"cards 0.2.7","title":"cards 0.2.7","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-026","dir":"Changelog","previous_headings":"","what":"cards 0.2.6","title":"cards 0.2.6","text":"Site rendering fixes","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-025","dir":"Changelog","previous_headings":"","what":"cards 0.2.5","title":"cards 0.2.5","text":"Updated installation instructions","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-024","dir":"Changelog","previous_headings":"","what":"cards 0.2.4","title":"cards 0.2.4","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-023","dir":"Changelog","previous_headings":"","what":"cards 0.2.3","title":"cards 0.2.3","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-022","dir":"Changelog","previous_headings":"","what":"cards 0.2.2","title":"cards 0.2.2","text":"Added benchmarks phevaluator using reticulate::import() Benchmarks vignette","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-021","dir":"Changelog","previous_headings":"","what":"cards 0.2.1","title":"cards 0.2.1","text":"Added “Video Poker” vignette","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-020","dir":"Changelog","previous_headings":"","what":"cards 0.2.0","title":"cards 0.2.0","text":"Moved benchmark tests new “Benchmarks” vignette Renamed functions first implementation new_deck_df(), deal_hand_df(), print_hand_df(), eval_hand_df() Use “T” ten instead “10” Add second implementation using integer(): new_deck(), deal_hand(), print_hand(), eval_hand() Updated Benchmarks vignette added comparisons implementations","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-013","dir":"Changelog","previous_headings":"","what":"cards 0.1.3","title":"cards 0.1.3","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-012","dir":"Changelog","previous_headings":"","what":"cards 0.1.2","title":"cards 0.1.2","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-011","dir":"Changelog","previous_headings":"","what":"cards 0.1.1","title":"cards 0.1.1","text":"Added notebook test performance using bench::mark()","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-010","dir":"Changelog","previous_headings":"","what":"cards 0.1.0","title":"cards 0.1.0","text":"Initial release. Includes basic functions poker simulation: new_deck(): returns deck 52 cards data.frame deal_hand(): selects 5 random cards deck print_hand(): return character vector sorted cards, collapsed default eval_hand(): evaluate hand rank category five card hand","code":""}]
