[{"path":"https://jabenninghoff.github.io/cards/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 cards authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jabenninghoff.github.io/cards/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO","title":"TODO","text":"Add vignette demonstrating video poker pay tables Add faster hand evaluator using Poker-Hand-Evaluator reticulate Add faster hand evaluator using Poker-Hand-Evaluator Rcpp","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"data-frame","dir":"Articles","previous_headings":"","what":"Data Frame","title":"Benchmarks","text":"Benchmark initial implementation using data.frame compared integer() approach similar PH Evaluator card.py.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"new-deck","dir":"Articles","previous_headings":"Data Frame","what":"New Deck","title":"Benchmarks","text":"Create new deck using new_deck_df() integer vector. new_deck_df() designed called frequently, using integer vector much faster.","code":"deck <- new_deck_df() deck_int <- 0:51 bench::mark(new_deck_df()) #> # A tibble: 1 × 6 #>   expression         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck_df()   44.8µs   51.1µs    16093.    1.25KB     4.11 bench::mark(0:51) #> # A tibble: 1 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 0:51          120ns    138ns  3273536.        0B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"deal","dir":"Articles","previous_headings":"Data Frame","what":"Deal","title":"Benchmarks","text":"Compare performance deal_hand_df() sampling integers: deal_hand_df() 7 times slower sample().","code":"bench::mark(deal_hand_df(deck)) #> # A tibble: 1 × 6 #>   expression              min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>         <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand_df(deck)   39.2µs   43.4µs    19982.    6.22KB     4.08 bench::mark(sample(deck_int, 5)) #> # A tibble: 1 × 6 #>   expression               min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>          <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 sample(deck_int, 5)   5.07µs   6.15µs   134342.    2.75KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"print","dir":"Articles","previous_headings":"Data Frame","what":"Print","title":"Benchmarks","text":"Test performance print_hand_df() simple function prints cards based integers. print_hand_df() 14-15 times slower integer approach.","code":"test_hand <- deal_hand_df(deck) bench::mark(print_hand_df(test_hand)) #> # A tibble: 1 × 6 #>   expression                    min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>               <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_df(test_hand)    174µs    189µs     4676.    10.5KB     6.17  print_hand_int <- function(h) {   cards <- paste0(rep(c(2:9, \"T\", \"J\", \"Q\", \"K\", \"A\"), each = 4), c(\"C\", \"D\", \"H\", \"S\"))   paste0(cards[h + 1], collapse = \" \") } test_hand_int <- sample(0:51, 5) bench::mark(print_hand_int(test_hand_int)) #> # A tibble: 1 × 6 #>   expression                         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_int(test_hand_int)   10.6µs   11.5µs    73827.      928B     7.38"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate","dir":"Articles","previous_headings":"Data Frame","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand_df() single hand randomly selected hands: expected naive poker hand evaluator, performance eval_hand_df() poor compared fast algorithms.","code":"bench::mark(eval_hand_df(test_hand)) #> # A tibble: 1 × 6 #>   expression                   min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>              <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(test_hand)    128µs    135µs     6263.      37KB     4.07 bench::mark(eval_hand_df(deal_hand_df(deck))) #> # A tibble: 1 × 6 #>   expression                            min  median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                       <bch:tm> <bch:t>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(deal_hand_df(deck))    142µs   178µs     4924.    2.75KB     6.16"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"summary","dir":"Articles","previous_headings":"Data Frame","what":"Summary","title":"Benchmarks","text":"implementation using integer likely much faster first implementation using data.frame. Rank suit can derived using integer division modulo arithmetic respectively, tabulate() faster replacement rle(). Note tabulate approach 7 times faster sorting run length encoding.","code":"0:51 %/% 4 #>  [1]  0  0  0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6 #> [26]  6  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 #> [51] 12 12 tabulate(0:51 %/% 4 + 1, 13) #>  [1] 4 4 4 4 4 4 4 4 4 4 4 4 4 0:51 %% 4 #>  [1] 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 #> [39] 2 3 0 1 2 3 0 1 2 3 0 1 2 3 tabulate(0:51 %% 4 + 1, 4) #> [1] 13 13 13 13  bench::mark(rle(sort(sample(0:51, 5) %/% 4 + 1))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                         <bch:t> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 rle(sort(sample(0:51, 5)%/%4 + 1))    51µs 54.2µs    15623.    2.75KB     6.18 bench::mark(tabulate(sample(0:51, 5) %/% 4 + 1, 13)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 tabulate(sample(0:51, 5)%/%4 + 1, … 7.15µs 7.88µs   103748.    2.75KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"integer","dir":"Articles","previous_headings":"","what":"Integer","title":"Benchmarks","text":"Benchmark second implementation using integer().","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"new-deck-1","dir":"Articles","previous_headings":"Integer","what":"New Deck","title":"Benchmarks","text":"Create new deck using new_deck() new_deck_df(). new_deck() 90 times faster.","code":"deck_df <- new_deck_df() deck <- new_deck() bench::mark(new_deck_df()) #> # A tibble: 1 × 6 #>   expression         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck_df()   43.6µs   45.8µs    18947.    1.25KB     6.18 bench::mark(new_deck()) #> # A tibble: 1 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck()    226ns    250ns  3043633.        0B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"deal-1","dir":"Articles","previous_headings":"Integer","what":"Deal","title":"Benchmarks","text":"Compare performance deal_hand_df() deal_hand() deal_hand() 6 times faster.","code":"bench::mark(deal_hand_df(deck_df)) #> # A tibble: 1 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand_df(deck_df)   38.6µs   40.6µs    20613.    2.75KB     6.19 bench::mark(deal_hand(deck)) #> # A tibble: 1 × 6 #>   expression           min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand(deck)   5.47µs   6.12µs   138467.    5.51KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"print-1","dir":"Articles","previous_headings":"Integer","what":"Print","title":"Benchmarks","text":"Test performance print_hand_df() print_hand(). print_hand() 16 times faster.","code":"test_hand_df <- deal_hand_df(deck_df) test_hand <- deal_hand(deck)  bench::mark(print_hand_df(test_hand_df)) #> # A tibble: 1 × 6 #>   expression                       min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_df(test_hand_df)    171µs    178µs     4817.        0B     6.14 bench::mark(print_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand(test_hand)   10.6µs     11µs    79240.    8.45KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate-1","dir":"Articles","previous_headings":"Integer","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand_df() eval_hand() single hand. eval_hand() 20 times faster, perform poorly compared fast algorithms.","code":"bench::mark(eval_hand_df(test_hand_df)) #> # A tibble: 1 × 6 #>   expression                      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                 <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(test_hand_df)    118µs    126µs     6717.        0B     6.53 bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   4.82µs   5.28µs   157933.    27.5KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"summary-1","dir":"Articles","previous_headings":"Integer","what":"Summary","title":"Benchmarks","text":"Compare performance evaluating printing multiple hands. Overall, new implementation 13-14 times faster.","code":"bench::mark({   deck <- new_deck_df()   replicate(50, {     hand <- deal_hand_df(deck)     paste0(print_hand_df(hand), \": \", eval_hand_df(hand))   }) }) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 { deck <- new_deck_df() replicate(… 19.6ms 21.5ms      45.9     159KB     6.89 bench::mark({   deck <- new_deck()   replicate(50, {     hand <- deal_hand(deck)     paste0(print_hand(hand), \": \", eval_hand(hand))   }) }) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 { deck <- new_deck() replicate(50,… 1.24ms 1.49ms      651.     199KB     6.38"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"python","dir":"Articles","previous_headings":"","what":"Python","title":"Benchmarks","text":"Benchmark integer() approach PH Evaluator using reticulate.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"import","dir":"Articles","previous_headings":"Python","what":"Import","title":"Benchmarks","text":"Test performance phevaluator using reticulate::import(), starting sample_cards(): phevaluator$sample_cards() 13 times slower R integer implementation. Also test phevaluator$evaluate_card() R integer method. evaluate_card() expects five seven integers passed individual parameters. Surprisingly, phevaluator almost slow original data frame implementation. Test using specific hands avoid overhead .call() .list(): Calling evaluate_cards() directly doesn’t significantly change results. Test random hands: Conclusion: using phevaluator via reticulate::import() faster way evaluate hands. important note phevaluator$evaluate_cards() eval_hand(), phevaluator ranks poker hands eval_hand() determines hand rank category.","code":"bench::mark(deal_hand(deck)) #> # A tibble: 1 × 6 #>   expression           min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand(deck)    5.5µs   6.21µs   134268.    2.75KB     13.4 bench::mark(phevaluator$sample_cards(5L)) #> # A tibble: 1 × 6 #>   expression                        min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                   <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$sample_cards(5L)    143µs    152µs     4379.    25.4KB     2.04 bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   4.77µs   5.27µs   164361.        0B        0 bench::mark(do.call(phevaluator$evaluate_cards, as.list(test_hand))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 do.call(phevaluator$evaluate_cards,… 149µs  164µs     5165.    17.4KB     4.15 four_aces <- c(51L, 50L, 49L, 48L, 47L) royal_flush <- c(50L, 46L, 42L, 38L, 34L)  bench::mark(eval_hand(four_aces)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(four_aces)    2.5µs   2.73µs   302546.        0B        0 bench::mark(phevaluator$evaluate_cards(51L, 50L, 49L, 48L, 47L)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$evaluate_cards(51L, 50L… 145µs  155µs     5528.    17.4KB     4.16  bench::mark(eval_hand(royal_flush)) #> # A tibble: 1 × 6 #>   expression                  min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>             <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(royal_flush)   4.22µs   4.54µs   196455.        0B        0 bench::mark(phevaluator$evaluate_cards(50L, 46L, 42L, 38L, 34L)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$evaluate_cards(50L, 46L… 143µs  152µs     5608.    17.4KB     4.14 bench::mark(eval_hand(deal_hand(deck))) #> # A tibble: 1 × 6 #>   expression                      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                 <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(deal_hand(deck))   9.08µs   11.7µs    77379.    2.75KB     7.74 bench::mark(do.call(phevaluator$evaluate_cards, as.list(deal_hand(deck)))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 do.call(phevaluator$evaluate_cards,… 163µs  174µs     4998.    20.2KB     4.16"},{"path":"https://jabenninghoff.github.io/cards/articles/video-poker.html","id":"one-hand","dir":"Articles","previous_headings":"","what":"One Hand","title":"Video Poker","text":"Run simple simulations single hand, without drawing new cards. Calculate payouts, using table optimal strategy article pay tables: Payout per coin betting 5 coins. Filter Royal Flushes: Calculate total payout, percentage return: simple “one hand” simulation performs much poorer expected return 99.54% optimal strategy.","code":"hands <- replicate(runs, eval_hand(deal_hand(deck))) payout <- hands |>   as_tibble_col(column_name = \"hand\") |>   mutate(payout = case_match(     hand,     c(\"high_card\", \"one_pair\") ~ 0,     \"jacks_better\" ~ 1,     \"two_pair\" ~ 2,     \"three_ofakind\" ~ 3,     \"straight\" ~ 4,     \"flush\" ~ 6,     \"full_house\" ~ 9,     \"four_ofakind\" ~ 25,     \"straight_flush\" ~ 50,     \"royal_flush\" ~ 800   )) payout |>   filter(payout == 800) #> # A tibble: 4 × 2 #>   hand        payout #>   <chr>        <dbl> #> 1 royal_flush    800 #> 2 royal_flush    800 #> 3 royal_flush    800 #> 4 royal_flush    800 total <- payout |>   pull(payout) |>   sum()  total #> [1] 677773 total / runs #> [1] 0.3388865"},{"path":"https://jabenninghoff.github.io/cards/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Benninghoff. Author, maintainer.","code":""},{"path":"https://jabenninghoff.github.io/cards/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benninghoff J (2023). cards: Card Simulation Tools. https://jabenninghoff.github.io/cards/, https://github.com/jabenninghoff/cards.","code":"@Manual{,   title = {cards: Card Simulation Tools},   author = {John Benninghoff},   year = {2023},   note = {https://jabenninghoff.github.io/cards/, https://github.com/jabenninghoff/cards}, }"},{"path":[]},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Card Simulation Tools","text":"Card Simulation Tools: Tools card game simulations, written base R. Feel free use /fork project!","code":""},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Card Simulation Tools","text":"can install development version cards GitHub : using renv:","code":"# install.packages(\"devtools\") devtools::install_github(\"jabenninghoff/cards\") # install.packages(\"renv\") renv::install(\"jabenninghoff/cards\")"},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Card Simulation Tools","text":"Changelog: See “Changelog” NEWS.md. Planned: TODO","code":""},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Card Simulation Tools","text":"cards package supports random draws evaluation poker rank category:","code":"library(cards)  deck <- new_deck() replicate(50, {   hand <- deal_hand(deck)   paste0(print_hand(hand), \": \", eval_hand(hand)) }) #>  [1] \"6C AS QS 3S 7C: high_card\"     \"5H 2H 4C 2D QS: one_pair\"      #>  [3] \"6H KC 3C AS 2D: high_card\"     \"2C JS 4S KH 2S: one_pair\"      #>  [5] \"5C 8H 9C TH 3C: high_card\"     \"JC 3D 8H AC 9C: high_card\"     #>  [7] \"2C AH 4D AD 6S: jacks_better\"  \"3C AH AC KS TD: jacks_better\"  #>  [9] \"5C 9S 2S TS AC: high_card\"     \"TC 3S TD 7C QD: one_pair\"      #> [11] \"QS 6C 6H 3D 7D: one_pair\"      \"KH 4C 3S 4H 4S: three_ofakind\" #> [13] \"TC AS JS 8D 7C: high_card\"     \"AS 4S JD 6D TS: high_card\"     #> [15] \"8D AC 2S 7S KC: high_card\"     \"JS 3C KC AC KS: jacks_better\"  #> [17] \"QS 6C KD JC 9C: high_card\"     \"6D 8H KC 7H 2S: high_card\"     #> [19] \"TD 3H AC 4S AS: jacks_better\"  \"JC 6D QD AS 6H: one_pair\"      #> [21] \"6D 7S 7D QH 4D: one_pair\"      \"JH 4S 2H KD 7C: high_card\"     #> [23] \"9D 6D 4D 3S TC: high_card\"     \"KS TC 6H JH 6D: one_pair\"      #> [25] \"6D 6S 3C 9C QC: one_pair\"      \"QC KH JC 6D 7H: high_card\"     #> [27] \"TC 3C JS 2C 9C: high_card\"     \"2D 8C 9H 3D 5S: high_card\"     #> [29] \"6D 3C 8H 6C TH: one_pair\"      \"9C 8D 6H 6S 5C: one_pair\"      #> [31] \"KC 4H QS 3S 7H: high_card\"     \"QD 4H 4D JD TC: one_pair\"      #> [33] \"9C 4D TC AH 3D: high_card\"     \"5S JD 8C 7S 8D: one_pair\"      #> [35] \"KS 6C JS AH 5S: high_card\"     \"8H 6H QS JD KD: high_card\"     #> [37] \"9D 3H AH 2D TS: high_card\"     \"6C 5C 2S 7H 8C: high_card\"     #> [39] \"KD QD KH 2S 5C: jacks_better\"  \"TD QS 3S 2D QH: jacks_better\"  #> [41] \"TC 7S 5H TS 2D: one_pair\"      \"AH TS QH QD 4H: jacks_better\"  #> [43] \"6D AD 6H 4D 3S: one_pair\"      \"QS 2C 8C KS 4H: high_card\"     #> [45] \"9S 6C 8D KS TS: high_card\"     \"9H 7H QS 9S 5H: one_pair\"      #> [47] \"QH 8S 8D 4H 9S: one_pair\"      \"6C KD KS KC 4C: three_ofakind\" #> [49] \"6H KD 7S 9S 5S: high_card\"     \"AC 6C AS 3D 7S: jacks_better\""},{"path":"https://jabenninghoff.github.io/cards/reference/cards-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cards: Card Simulation Tools — cards-package","title":"cards: Card Simulation Tools — cards-package","text":"Tools card game simulations, written base R.","code":""},{"path":[]},{"path":"https://jabenninghoff.github.io/cards/reference/cards-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cards: Card Simulation Tools — cards-package","text":"Maintainer: John Benninghoff jbenninghoff@mac.com (ORCID)","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a hand of cards — deal_hand","title":"Deal a hand of cards — deal_hand","text":"Return five card hand deck cards, integer","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a hand of cards — deal_hand","text":"","code":"deal_hand(deck, size = 5)"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a hand of cards — deal_hand","text":"deck deck created new_deck(). size hand size, default = 5.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a hand of cards — deal_hand","text":"Uses sample() select random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a hand of cards — deal_hand","text":"","code":"deal_hand(new_deck()) #> [1] 32 19 51 23 47"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a hand of cards using data.frame — deal_hand_df","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"Return five card hand deck cards, data.frame rank suit.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"","code":"deal_hand_df(d)"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"d deck created new_deck_df().","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"data.frame containing 5 random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"Uses sample() select 5 random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"","code":"deck <- new_deck_df() deal_hand_df(deck) #>    rank suit #> 52    A    S #> 15    3    D #> 16    4    D #> 11    Q    C #> 35    T    H"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand — eval_hand","title":"Evaluate a poker hand — eval_hand","text":"Evaluate rank category five card poker hand.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand — eval_hand","text":"","code":"eval_hand(hand)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand — eval_hand","text":"hand hand cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand — eval_hand","text":"string hand rank","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand — eval_hand","text":"","code":"hand <- deal_hand(new_deck()) print_hand(hand) #> [1] \"2S KH 7S TH JH\" eval_hand(hand) #> [1] \"high_card\""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand using data.frame — eval_hand_df","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"Evaluate rank category five card poker hand.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"","code":"eval_hand_df(h)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"h data.frame 5 cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"string hand rank","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"Uses order() rle() identify flushes, straights, pairs, three, four kind.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"","code":"deck <- new_deck_df() (hand <- deal_hand_df(deck)) #>    rank suit #> 44    6    S #> 31    6    H #> 16    4    D #> 14    2    D #> 2     3    C eval_hand_df(hand) #> [1] \"one_pair\""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deck of cards — new_deck","title":"Create a deck of cards — new_deck","text":"Return deck 52 playing cards represented integers 0 51.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deck of cards — new_deck","text":"","code":"new_deck()"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deck of cards — new_deck","text":"Following example PH Evaluator, integers used represent card id, two least significant bits representing 4 suits (0-3), rest representing 13 ranks (0-12): card, rank id %/% 4, suit id %% 4.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deck of cards — new_deck","text":"","code":"new_deck() #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #> [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #> [51] 50 51 new_deck() %/% 4 #>  [1]  0  0  0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6 #> [26]  6  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 #> [51] 12 12 new_deck() %% 4 #>  [1] 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 #> [39] 2 3 0 1 2 3 0 1 2 3 0 1 2 3"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deck of cards using data.frame — new_deck_df","title":"Create a deck of cards using data.frame — new_deck_df","text":"Return standard deck 52 playing cards, data.frame rank suit.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deck of cards using data.frame — new_deck_df","text":"","code":"new_deck_df()"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deck of cards using data.frame — new_deck_df","text":"data.frame containing deck 52 cards","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deck of cards using data.frame — new_deck_df","text":"Uses expand.grid() creates data.frame factors combining ranks suits.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deck of cards using data.frame — new_deck_df","text":"","code":"new_deck_df() #>    rank suit #> 1     2    C #> 2     3    C #> 3     4    C #> 4     5    C #> 5     6    C #> 6     7    C #> 7     8    C #> 8     9    C #> 9     T    C #> 10    J    C #> 11    Q    C #> 12    K    C #> 13    A    C #> 14    2    D #> 15    3    D #> 16    4    D #> 17    5    D #> 18    6    D #> 19    7    D #> 20    8    D #> 21    9    D #> 22    T    D #> 23    J    D #> 24    Q    D #> 25    K    D #> 26    A    D #> 27    2    H #> 28    3    H #> 29    4    H #> 30    5    H #> 31    6    H #> 32    7    H #> 33    8    H #> 34    9    H #> 35    T    H #> 36    J    H #> 37    Q    H #> 38    K    H #> 39    A    H #> 40    2    S #> 41    3    S #> 42    4    S #> 43    5    S #> 44    6    S #> 45    7    S #> 46    8    S #> 47    9    S #> 48    T    S #> 49    J    S #> 50    Q    S #> 51    K    S #> 52    A    S"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hand of cards — print_hand","title":"Print a hand of cards — print_hand","text":"Returns character vector cards, collapsed default.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hand of cards — print_hand","text":"","code":"print_hand(hand, collapse = TRUE)"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hand of cards — print_hand","text":"hand hand cards. collapse TRUE, collapse character vector.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a hand of cards — print_hand","text":"","code":"(hand <- deal_hand(new_deck())) #> [1] 34 37 50  5  1 print_hand(hand) #> [1] \"TH JD AH 3D 2D\""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hand of cards using data.frame — print_hand_df","title":"Print a hand of cards using data.frame — print_hand_df","text":"Returns character vector sorted cards, collapsed default.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hand of cards using data.frame — print_hand_df","text":"","code":"print_hand_df(h, collapse = TRUE)"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hand of cards using data.frame — print_hand_df","text":"h data.frame 5 cards. collapse TRUE, collapse character vector.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a hand of cards using data.frame — print_hand_df","text":"character vector sorted cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a hand of cards using data.frame — print_hand_df","text":"","code":"deck <- new_deck_df() (hand <- deal_hand_df(deck)) #>    rank suit #> 45    7    S #> 31    6    H #> 52    A    S #> 42    4    S #> 33    8    H print_hand_df(hand) #> [1] \"4S 6H 7S 8H AS\""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-023","dir":"Changelog","previous_headings":"","what":"cards 0.2.3","title":"cards 0.2.3","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-022","dir":"Changelog","previous_headings":"","what":"cards 0.2.2","title":"cards 0.2.2","text":"Added benchmarks phevaluator using reticulate::import() Benchmarks vignette","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-021","dir":"Changelog","previous_headings":"","what":"cards 0.2.1","title":"cards 0.2.1","text":"Added “Video Poker” vignette","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-020","dir":"Changelog","previous_headings":"","what":"cards 0.2.0","title":"cards 0.2.0","text":"Moved benchmark tests new “Benchmarks” vignette Renamed functions first implementation new_deck_df(), deal_hand_df(), print_hand_df(), eval_hand_df() Use “T” ten instead “10” Add second implementation using integer(): new_deck(), deal_hand(), print_hand(), eval_hand() Updated Benchmarks vignette added comparisons implementations","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-013","dir":"Changelog","previous_headings":"","what":"cards 0.1.3","title":"cards 0.1.3","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-012","dir":"Changelog","previous_headings":"","what":"cards 0.1.2","title":"cards 0.1.2","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-011","dir":"Changelog","previous_headings":"","what":"cards 0.1.1","title":"cards 0.1.1","text":"Added notebook test performance using bench::mark()","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-010","dir":"Changelog","previous_headings":"","what":"cards 0.1.0","title":"cards 0.1.0","text":"Initial release. Includes basic functions poker simulation: new_deck(): returns deck 52 cards data.frame deal_hand(): selects 5 random cards deck print_hand(): return character vector sorted cards, collapsed default eval_hand(): evaluate hand rank category five card hand","code":""}]
