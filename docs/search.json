[{"path":"https://jabenninghoff.github.io/cards/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 cards authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jabenninghoff.github.io/cards/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO","title":"TODO","text":"Add vignette demonstrating video poker pay tables Add faster hand evaluator using Poker-Hand-Evaluator reticulate Add faster hand evaluator using Poker-Hand-Evaluator Rcpp","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"data-frame","dir":"Articles","previous_headings":"","what":"Data Frame","title":"Benchmarks","text":"Benchmark initial implementation using data.frame compared integer() approach similar PH Evaluator card.py.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"new-deck","dir":"Articles","previous_headings":"Data Frame","what":"New Deck","title":"Benchmarks","text":"Create new deck using new_deck_df() integer vector. new_deck_df() designed called frequently, using integer vector much faster.","code":"deck <- new_deck_df() deck_int <- 0:51 bench::mark(new_deck_df()) #> # A tibble: 1 × 6 #>   expression         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck_df()   40.5µs   63.7µs    13433.    1.25KB     4.11 bench::mark(0:51) #> # A tibble: 1 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 0:51          121ns    127ns  3946535.        0B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"deal","dir":"Articles","previous_headings":"Data Frame","what":"Deal","title":"Benchmarks","text":"Compare performance deal_hand_df() sampling integers: deal_hand_df() 7 times slower sample().","code":"bench::mark(deal_hand_df(deck)) #> # A tibble: 1 × 6 #>   expression              min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>         <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand_df(deck)   39.8µs   45.8µs    17121.    6.22KB     4.11 bench::mark(sample(deck_int, 5)) #> # A tibble: 1 × 6 #>   expression               min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>          <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 sample(deck_int, 5)   5.07µs    7.2µs   102582.    2.75KB     10.3"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"print","dir":"Articles","previous_headings":"Data Frame","what":"Print","title":"Benchmarks","text":"Test performance print_hand_df() simple function prints cards based integers. print_hand_df() 14-15 times slower integer approach.","code":"test_hand <- deal_hand_df(deck) bench::mark(print_hand_df(test_hand)) #> # A tibble: 1 × 6 #>   expression                    min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>               <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_df(test_hand)    174µs    218µs     3812.    10.5KB     4.09  print_hand_int <- function(h) {   cards <- paste0(rep(c(2:9, \"T\", \"J\", \"Q\", \"K\", \"A\"), each = 4), c(\"C\", \"D\", \"H\", \"S\"))   paste0(cards[h + 1], collapse = \" \") } test_hand_int <- sample(0:51, 5) bench::mark(print_hand_int(test_hand_int)) #> # A tibble: 1 × 6 #>   expression                         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_int(test_hand_int)   10.6µs   11.7µs    62527.      928B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate","dir":"Articles","previous_headings":"Data Frame","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand_df() single hand randomly selected hands: expected naive poker hand evaluator, performance eval_hand_df() poor compared fast algorithms.","code":"bench::mark(eval_hand_df(test_hand)) #> # A tibble: 1 × 6 #>   expression                   min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>              <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(test_hand)    113µs    144µs     5624.    34.6KB     5.98 bench::mark(eval_hand_df(deal_hand_df(deck))) #> # A tibble: 1 × 6 #>   expression                            min  median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                       <bch:tm> <bch:t>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(deal_hand_df(deck))    141µs   186µs     4592.    2.75KB     4.08"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"summary","dir":"Articles","previous_headings":"Data Frame","what":"Summary","title":"Benchmarks","text":"implementation using integer likely much faster first implementation using data.frame. Rank suit can derived using integer division modulo arithmetic respectively, tabulate() faster replacement rle(). Note tabulate approach 7 times faster sorting run length encoding.","code":"0:51 %/% 4 #>  [1]  0  0  0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6 #> [26]  6  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 #> [51] 12 12 tabulate(0:51 %/% 4 + 1, 13) #>  [1] 4 4 4 4 4 4 4 4 4 4 4 4 4 0:51 %% 4 #>  [1] 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 #> [39] 2 3 0 1 2 3 0 1 2 3 0 1 2 3 tabulate(0:51 %% 4 + 1, 4) #> [1] 13 13 13 13  bench::mark(rle(sort(sample(0:51, 5) %/% 4 + 1))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                         <bch:t> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 rle(sort(sample(0:51, 5)%/%4 + 1))  48.1µs 61.5µs    12374.    2.75KB     4.09 bench::mark(tabulate(sample(0:51, 5) %/% 4 + 1, 13)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 tabulate(sample(0:51, 5)%/%4 + 1, … 7.37µs 8.42µs    88197.    2.75KB     8.82"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"integer","dir":"Articles","previous_headings":"","what":"Integer","title":"Benchmarks","text":"Benchmark second implementation using integer().","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"new-deck-1","dir":"Articles","previous_headings":"Integer","what":"New Deck","title":"Benchmarks","text":"Create new deck using new_deck() new_deck_df(). new_deck() 90 times faster.","code":"deck_df <- new_deck_df() deck <- new_deck() bench::mark(new_deck_df()) #> # A tibble: 1 × 6 #>   expression         min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck_df()   43.9µs   47.8µs    16496.    1.25KB     4.11 bench::mark(new_deck()) #> # A tibble: 1 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 new_deck()    215ns    224ns  2742247.        0B        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"deal-1","dir":"Articles","previous_headings":"Integer","what":"Deal","title":"Benchmarks","text":"Compare performance deal_hand_df() deal_hand() deal_hand() 6 times faster.","code":"bench::mark(deal_hand_df(deck_df)) #> # A tibble: 1 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand_df(deck_df)   34.9µs   41.9µs    19152.    2.75KB     6.23 bench::mark(deal_hand(deck)) #> # A tibble: 1 × 6 #>   expression           min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand(deck)   5.53µs   6.29µs   114451.    5.51KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"print-1","dir":"Articles","previous_headings":"Integer","what":"Print","title":"Benchmarks","text":"Test performance print_hand_df() print_hand(). print_hand() 16 times faster.","code":"test_hand_df <- deal_hand_df(deck_df) test_hand <- deal_hand(deck)  bench::mark(print_hand_df(test_hand_df)) #> # A tibble: 1 × 6 #>   expression                       min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand_df(test_hand_df)    174µs    270µs     3105.        0B     2.02 bench::mark(print_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                 min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 print_hand(test_hand)   10.6µs   20.5µs    34468.    8.45KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"evaluate-1","dir":"Articles","previous_headings":"Integer","what":"Evaluate","title":"Benchmarks","text":"Test performance eval_hand_df() eval_hand() single hand. eval_hand() 20 times faster, perform poorly compared fast algorithms.","code":"bench::mark(eval_hand_df(test_hand_df)) #> # A tibble: 1 × 6 #>   expression                      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                 <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand_df(test_hand_df)    131µs    193µs     4151.        0B     4.13 bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   4.92µs   5.38µs   134228.    27.5KB        0"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"summary-1","dir":"Articles","previous_headings":"Integer","what":"Summary","title":"Benchmarks","text":"Compare performance evaluating printing multiple hands. Overall, new implementation 13-14 times faster.","code":"bench::mark({   deck <- new_deck_df()   replicate(50, {     hand <- deal_hand_df(deck)     paste0(print_hand_df(hand), \": \", eval_hand_df(hand))   }) }) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 { deck <- new_deck_df() replicate(… 25.2ms 32.6ms      29.1     159KB     4.48 bench::mark({   deck <- new_deck()   replicate(50, {     hand <- deal_hand(deck)     paste0(print_hand(hand), \": \", eval_hand(hand))   }) }) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                          <bch:> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 { deck <- new_deck() replicate(50,… 1.41ms 2.18ms      432.     199KB     4.17"},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"python","dir":"Articles","previous_headings":"","what":"Python","title":"Benchmarks","text":"Benchmark integer() approach PH Evaluator using reticulate.","code":""},{"path":"https://jabenninghoff.github.io/cards/articles/benchmarks.html","id":"import","dir":"Articles","previous_headings":"Python","what":"Import","title":"Benchmarks","text":"Test performance phevaluator using reticulate::import(), starting sample_cards(): phevaluator$sample_cards() 13 times slower R integer implementation. Also test phevaluator$evaluate_card() R integer method. evaluate_card() expects five seven integers passed individual parameters. Surprisingly, phevaluator almost slow original data frame implementation. Test using specific hands avoid overhead .call() .list(): Calling evaluate_cards() directly doesn’t significantly change results. Test random hands: Conclusion: using phevaluator via reticulate::import() faster way evaluate hands. important note phevaluator$evaluate_cards() eval_hand(), phevaluator ranks poker hands eval_hand() determines hand rank category.","code":"bench::mark(deal_hand(deck)) #> # A tibble: 1 × 6 #>   expression           min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>      <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 deal_hand(deck)   5.52µs   6.33µs   118698.    2.75KB        0 bench::mark(phevaluator$sample_cards(5L)) #> # A tibble: 1 × 6 #>   expression                        min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                   <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$sample_cards(5L)    139µs    158µs     3834.    25.4KB     4.47 bench::mark(eval_hand(test_hand)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(test_hand)   4.88µs   5.32µs   151237.        0B        0 bench::mark(do.call(phevaluator$evaluate_cards, as.list(test_hand))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 do.call(phevaluator$evaluate_cards,… 149µs  206µs     4047.    17.4KB     2.06 four_aces <- c(51L, 50L, 49L, 48L, 47L) royal_flush <- c(50L, 46L, 42L, 38L, 34L)  bench::mark(eval_hand(four_aces)) #> # A tibble: 1 × 6 #>   expression                min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(four_aces)   2.58µs   3.29µs   219798.        0B        0 bench::mark(phevaluator$evaluate_cards(51L, 50L, 49L, 48L, 47L)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$evaluate_cards(51L, 50L… 142µs  182µs     4282.    17.4KB     2.05  bench::mark(eval_hand(royal_flush)) #> # A tibble: 1 × 6 #>   expression                  min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>             <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(royal_flush)   4.28µs   4.83µs   152853.        0B     15.3 bench::mark(phevaluator$evaluate_cards(50L, 46L, 42L, 38L, 34L)) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 phevaluator$evaluate_cards(50L, 46L… 141µs  177µs     4609.    17.4KB     2.06 bench::mark(eval_hand(deal_hand(deck))) #> # A tibble: 1 × 6 #>   expression                      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                 <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 eval_hand(deal_hand(deck))   9.36µs   12.3µs    68165.    2.75KB     6.82 bench::mark(do.call(phevaluator$evaluate_cards, as.list(deal_hand(deck)))) #> # A tibble: 1 × 6 #>   expression                             min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>                           <bch> <bch:>     <dbl> <bch:byt>    <dbl> #> 1 do.call(phevaluator$evaluate_cards,… 160µs  187µs     4444.    20.2KB     2.05"},{"path":"https://jabenninghoff.github.io/cards/articles/video-poker.html","id":"one-hand","dir":"Articles","previous_headings":"","what":"One Hand","title":"Video Poker","text":"Run simple simulations single hand, without drawing new cards. Calculate payouts, using table optimal strategy article pay tables: Payout per coin betting 5 coins. Filter Royal Flushes: Calculate total payout, percentage return: simple “one hand” simulation performs much poorer expected return 99.54% optimal strategy.","code":"hands <- replicate(runs, eval_hand(deal_hand(deck))) payout <- hands |>   as_tibble_col(column_name = \"hand\") |>   mutate(payout = case_match(     hand,     c(\"high_card\", \"one_pair\") ~ 0,     \"jacks_better\" ~ 1,     \"two_pair\" ~ 2,     \"three_ofakind\" ~ 3,     \"straight\" ~ 4,     \"flush\" ~ 6,     \"full_house\" ~ 9,     \"four_ofakind\" ~ 25,     \"straight_flush\" ~ 50,     \"royal_flush\" ~ 800   )) payout |>   filter(payout == 800) #> # A tibble: 3 × 2 #>   hand        payout #>   <chr>        <dbl> #> 1 royal_flush    800 #> 2 royal_flush    800 #> 3 royal_flush    800 total <- payout |>   pull(payout) |>   sum()  total #> [1] 673432 total / runs #> [1] 0.336716"},{"path":"https://jabenninghoff.github.io/cards/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Benninghoff. Author, maintainer.","code":""},{"path":"https://jabenninghoff.github.io/cards/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Benninghoff J (2023). cards: Card Simulation Tools. https://jabenninghoff.github.io/cards/, https://github.com/jabenninghoff/cards.","code":"@Manual{,   title = {cards: Card Simulation Tools},   author = {John Benninghoff},   year = {2023},   note = {https://jabenninghoff.github.io/cards/, https://github.com/jabenninghoff/cards}, }"},{"path":[]},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Card Simulation Tools","text":"Card Simulation Tools: Tools card game simulations, written base R. Feel free use /fork project!","code":""},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Card Simulation Tools","text":"can install development version cards GitHub : using renv:","code":"# install.packages(\"devtools\") devtools::install_github(\"jabenninghoff/cards\") # install.packages(\"renv\") renv::install(\"jabenninghoff/cards\")"},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Card Simulation Tools","text":"Changelog: See “Changelog” NEWS.md. Planned: TODO","code":""},{"path":"https://jabenninghoff.github.io/cards/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Card Simulation Tools","text":"cards package supports random draws evaluation poker rank category:","code":"library(cards)  deck <- new_deck() replicate(50, {   hand <- deal_hand(deck)   paste0(print_hand(hand), \": \", eval_hand(hand)) }) #>  [1] \"9C QC KC 5D 9H: one_pair\"      \"QC 5S 3D 5C 6C: one_pair\"      #>  [3] \"QD AS KS 9H 2D: high_card\"     \"5S 2C KC 8C 7C: high_card\"     #>  [5] \"8D AH 4C TC 2H: high_card\"     \"2C 9D 7D 2H KC: one_pair\"      #>  [7] \"5S 4C 5D AS AD: two_pair\"      \"7C 6S JH 4H 9S: high_card\"     #>  [9] \"8S 4H 3H KH 5S: high_card\"     \"AS 5H 6S 6H 7C: one_pair\"      #> [11] \"KS 3C 8C 9D 2S: high_card\"     \"3C KD 5C 6S QD: high_card\"     #> [13] \"AD 3D TS 8D AH: jacks_better\"  \"KS JC TS TH 3C: one_pair\"      #> [15] \"6S 5C QC AS 5H: one_pair\"      \"8D 8H 4C 6S 6D: two_pair\"      #> [17] \"AD 8C JC 7S 4D: high_card\"     \"QC 6H 3H 8H 8D: one_pair\"      #> [19] \"9H JD AS 4D TD: high_card\"     \"KS 2C 5D 9C AC: high_card\"     #> [21] \"6C QH 2C 7H 3S: high_card\"     \"5C 9C 5D AC 8D: one_pair\"      #> [23] \"AD 7D 7H QS 5S: one_pair\"      \"5H 5D 8H 4C 7H: one_pair\"      #> [25] \"2D 7C KS 9S JS: high_card\"     \"2D TH 4D QC 3H: high_card\"     #> [27] \"4S 5C 6C AS AH: jacks_better\"  \"AS 3S 4C 5C 7H: high_card\"     #> [29] \"2D KD 6C 7H 5H: high_card\"     \"QD 2H 4H 3S KH: high_card\"     #> [31] \"AD KH 6H 7H 3D: high_card\"     \"AH 9S 2H 9H AC: two_pair\"      #> [33] \"5C QD 8C 5H 5D: three_ofakind\" \"7S 2H JD 9D 8S: high_card\"     #> [35] \"7H AS 8H 6D 8S: one_pair\"      \"4C 9S 4D AS 8S: one_pair\"      #> [37] \"8H 5S 6S 3C AH: high_card\"     \"TS 7S AD 3S 2S: high_card\"     #> [39] \"QS 5H TD JC 3H: high_card\"     \"7H QS 3H 2C AH: high_card\"     #> [41] \"6D 3S KC 3H QH: one_pair\"      \"TH 2C JH JD 7D: jacks_better\"  #> [43] \"AC JD 8D TD 7H: high_card\"     \"JD 4H 2C KH 9D: high_card\"     #> [45] \"3C 7S 7C 6C 4H: one_pair\"      \"QD 9C 4H 7S 8H: high_card\"     #> [47] \"8D 8C JH 4D 3C: one_pair\"      \"5D TH AS AD JH: jacks_better\"  #> [49] \"KH 4C 7S AD JC: high_card\"     \"2D 8D TS TD 3D: one_pair\""},{"path":"https://jabenninghoff.github.io/cards/reference/cards-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cards: Card Simulation Tools — cards-package","title":"cards: Card Simulation Tools — cards-package","text":"Tools card game simulations, written base R.","code":""},{"path":[]},{"path":"https://jabenninghoff.github.io/cards/reference/cards-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cards: Card Simulation Tools — cards-package","text":"Maintainer: John Benninghoff jbenninghoff@mac.com (ORCID)","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a hand of cards — deal_hand","title":"Deal a hand of cards — deal_hand","text":"Return five card hand deck cards, integer","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a hand of cards — deal_hand","text":"","code":"deal_hand(deck, size = 5)"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a hand of cards — deal_hand","text":"deck deck created new_deck(). size hand size, default = 5.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a hand of cards — deal_hand","text":"Uses sample() select random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a hand of cards — deal_hand","text":"","code":"deal_hand(new_deck()) #> [1] 48  1 22 40 29"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Deal a hand of cards using data.frame — deal_hand_df","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"Return five card hand deck cards, data.frame rank suit.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"","code":"deal_hand_df(d)"},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"d deck created new_deck_df().","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"data.frame containing 5 random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"Uses sample() select 5 random cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/deal_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deal a hand of cards using data.frame — deal_hand_df","text":"","code":"deck <- new_deck_df() deal_hand_df(deck) #>    rank suit #> 17    5    D #> 41    3    S #> 11    Q    C #> 48    T    S #> 27    2    H"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand — eval_hand","title":"Evaluate a poker hand — eval_hand","text":"Evaluate rank category five card poker hand.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand — eval_hand","text":"","code":"eval_hand(hand)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand — eval_hand","text":"hand hand cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand — eval_hand","text":"string hand rank","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand — eval_hand","text":"","code":"hand <- deal_hand(new_deck()) print_hand(hand) #> [1] \"3C TH 6S 4H AH\" eval_hand(hand) #> [1] \"high_card\""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a poker hand using data.frame — eval_hand_df","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"Evaluate rank category five card poker hand.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"","code":"eval_hand_df(h)"},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"h data.frame 5 cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"string hand rank","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"Uses order() rle() identify flushes, straights, pairs, three, four kind.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/eval_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a poker hand using data.frame — eval_hand_df","text":"","code":"deck <- new_deck_df() (hand <- deal_hand_df(deck)) #>    rank suit #> 42    4    S #> 45    7    S #> 5     6    C #> 12    K    C #> 14    2    D eval_hand_df(hand) #> [1] \"high_card\""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deck of cards — new_deck","title":"Create a deck of cards — new_deck","text":"Return deck 52 playing cards represented integers 0 51.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deck of cards — new_deck","text":"","code":"new_deck()"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deck of cards — new_deck","text":"Following example PH Evaluator, integers used represent card id, two least significant bits representing 4 suits (0-3), rest representing 13 ranks (0-12): card, rank id %/% 4, suit id %% 4.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deck of cards — new_deck","text":"","code":"new_deck() #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #> [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #> [51] 50 51 new_deck() %/% 4 #>  [1]  0  0  0  0  1  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6 #> [26]  6  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 #> [51] 12 12 new_deck() %% 4 #>  [1] 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 #> [39] 2 3 0 1 2 3 0 1 2 3 0 1 2 3"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deck of cards using data.frame — new_deck_df","title":"Create a deck of cards using data.frame — new_deck_df","text":"Return standard deck 52 playing cards, data.frame rank suit.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deck of cards using data.frame — new_deck_df","text":"","code":"new_deck_df()"},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deck of cards using data.frame — new_deck_df","text":"data.frame containing deck 52 cards","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deck of cards using data.frame — new_deck_df","text":"Uses expand.grid() creates data.frame factors combining ranks suits.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/new_deck_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deck of cards using data.frame — new_deck_df","text":"","code":"new_deck_df() #>    rank suit #> 1     2    C #> 2     3    C #> 3     4    C #> 4     5    C #> 5     6    C #> 6     7    C #> 7     8    C #> 8     9    C #> 9     T    C #> 10    J    C #> 11    Q    C #> 12    K    C #> 13    A    C #> 14    2    D #> 15    3    D #> 16    4    D #> 17    5    D #> 18    6    D #> 19    7    D #> 20    8    D #> 21    9    D #> 22    T    D #> 23    J    D #> 24    Q    D #> 25    K    D #> 26    A    D #> 27    2    H #> 28    3    H #> 29    4    H #> 30    5    H #> 31    6    H #> 32    7    H #> 33    8    H #> 34    9    H #> 35    T    H #> 36    J    H #> 37    Q    H #> 38    K    H #> 39    A    H #> 40    2    S #> 41    3    S #> 42    4    S #> 43    5    S #> 44    6    S #> 45    7    S #> 46    8    S #> 47    9    S #> 48    T    S #> 49    J    S #> 50    Q    S #> 51    K    S #> 52    A    S"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hand of cards — print_hand","title":"Print a hand of cards — print_hand","text":"Returns character vector cards, collapsed default.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hand of cards — print_hand","text":"","code":"print_hand(hand, collapse = TRUE)"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hand of cards — print_hand","text":"hand hand cards. collapse TRUE, collapse character vector.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a hand of cards — print_hand","text":"","code":"(hand <- deal_hand(new_deck())) #> [1] 17  8 21 16 29 print_hand(hand) #> [1] \"6D 4C 7D 6C 9D\""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hand of cards using data.frame — print_hand_df","title":"Print a hand of cards using data.frame — print_hand_df","text":"Returns character vector sorted cards, collapsed default.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hand of cards using data.frame — print_hand_df","text":"","code":"print_hand_df(h, collapse = TRUE)"},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hand of cards using data.frame — print_hand_df","text":"h data.frame 5 cards. collapse TRUE, collapse character vector.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a hand of cards using data.frame — print_hand_df","text":"character vector sorted cards.","code":""},{"path":"https://jabenninghoff.github.io/cards/reference/print_hand_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a hand of cards using data.frame — print_hand_df","text":"","code":"deck <- new_deck_df() (hand <- deal_hand_df(deck)) #>    rank suit #> 35    T    H #> 50    Q    S #> 7     8    C #> 33    8    H #> 18    6    D print_hand_df(hand) #> [1] \"6D 8C 8H TH QS\""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-024","dir":"Changelog","previous_headings":"","what":"cards 0.2.4","title":"cards 0.2.4","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-023","dir":"Changelog","previous_headings":"","what":"cards 0.2.3","title":"cards 0.2.3","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-022","dir":"Changelog","previous_headings":"","what":"cards 0.2.2","title":"cards 0.2.2","text":"Added benchmarks phevaluator using reticulate::import() Benchmarks vignette","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-021","dir":"Changelog","previous_headings":"","what":"cards 0.2.1","title":"cards 0.2.1","text":"Added “Video Poker” vignette","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-020","dir":"Changelog","previous_headings":"","what":"cards 0.2.0","title":"cards 0.2.0","text":"Moved benchmark tests new “Benchmarks” vignette Renamed functions first implementation new_deck_df(), deal_hand_df(), print_hand_df(), eval_hand_df() Use “T” ten instead “10” Add second implementation using integer(): new_deck(), deal_hand(), print_hand(), eval_hand() Updated Benchmarks vignette added comparisons implementations","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-013","dir":"Changelog","previous_headings":"","what":"cards 0.1.3","title":"cards 0.1.3","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-012","dir":"Changelog","previous_headings":"","what":"cards 0.1.2","title":"cards 0.1.2","text":"Maintenance update","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-011","dir":"Changelog","previous_headings":"","what":"cards 0.1.1","title":"cards 0.1.1","text":"Added notebook test performance using bench::mark()","code":""},{"path":"https://jabenninghoff.github.io/cards/news/index.html","id":"cards-010","dir":"Changelog","previous_headings":"","what":"cards 0.1.0","title":"cards 0.1.0","text":"Initial release. Includes basic functions poker simulation: new_deck(): returns deck 52 cards data.frame deal_hand(): selects 5 random cards deck print_hand(): return character vector sorted cards, collapsed default eval_hand(): evaluate hand rank category five card hand","code":""}]
